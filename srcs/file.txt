

docker stop [tab]....
docker system prune -a  =>

docker build -t wordpress-php-fpm .
docker run -d --name wordpress-container -p 9000:9000 wordpress-php-fpm
 
docker ps -a

docker logs e53ce15b2967
docker inspect e53ce15b2967

docker run -i -t ubuntu /bin/bash 

docker network create my_network

docker run -d --name nginx-container --network my_network -p 8443:443 nginx
docker run -d --name wordpress-container --network my_network wordpress

docker exec -it nginx-container /bin/bash

# # Configurer NGINX pour utiliser uniquement TLSv1.2 et TLSv1.3
# RUN sed -i 's/#\(ssl_protocols\)/ssl_protocols/' /etc/nginx/nginx.conf \
#     && sed -i 's/ssl_protocols .*/ssl_protocols TLSv1.3;/' /etc/nginx/nginx.conf \
#     && sed -i 's/#\(ssl_prefer_server_ciphers\)/ssl_prefer_server_ciphers/' /etc/nginx/nginx.conf \
#     && sed -i 's/ssl_prefer_server_ciphers .*/ssl_prefer_server_ciphers on;/' /etc/nginx/nginx.conf

mariadb
create database wordpress;
use wordpress
service --status-all

service mariadb start/stop
CREATE USER 'username'@'%' IDENTIFIED BY 'password';

show databases;

flush privileges;

SELECT User,Host FROM mysql.user;

docker container prune

docker build -t my-custom-mariadb-image .

docker run -d --name mariadb-container --network my_network -e MYSQL_ROOT_PASSWORD=your_root_password -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress_user -e MYSQL_PASSWORD=wordpress_password my-custom-mariadb-image

///////////////////////////

docker build -t mariadb-image .
docker run -d --name mariadb-container --network my_network \
    -e MYSQL_ROOT_PASSWORD=your_root_password \
    -e MYSQL_DATABASE=wordpress \
    -e MYSQL_USER=wordpress_user \
    -e MYSQL_PASSWORD=wordpress_password \
    mariadb-image

docker build -t wordpress-image .

docker run -d --name wordpress-container --network my_network \
    -e WORDPRESS_DB_HOST=mariadb \
    -e WORDPRESS_DB_USER=wordpress_user \
    -e WORDPRESS_DB_PASSWORD=wordpress_password \
    -e WORDPRESS_DB_NAME=wordpress \
    wordpress-image

docker build -t nginx .

docker run -d --name nginx-container --network my_network \
-p 8443:443 \
nginx-image

docker network inspect my_network
docker network connect my_network nginx-container

# Rebuild the NGINX image
docker build -t nginx-image .

# Stop and remove the existing NGINX container
docker stop nginx-container
docker rm nginx-container

# Start the NGINX container again
docker run -d --name nginx-container --network my_network -p 8443:443 nginx-image

ssh-keygen -f "/home/lefabreg/.ssh/known_hosts" -R "[localhost]:2222" 
